################### Commandbeat Configuration Example #########################

############################# Commandbeat ######################################

commandbeat:
  # debug mode.  if true, print the command and the parsed result but will not publish to elasticsearch.
  debug: false
  # define tasks to run.
  tasks:
    # this example simply execute the command and publish the raw string as 'message'.
    command-string:
      # command to execute
      command: echo "hello world"
    # this example defines command with command array.
    command-array:
      command: 
        - echo
        - hello world
    # this example parses the result as csv
    parser-csv:
      command: echo "hello,world,1,1.5,true"
      parser:
        type: csv
        fields:
          - name: field1
            type: string
          - name: field2
            type: string
          - name: field3
            type: int
          - name: field4
            type: float
          - name: field5
            type: bool
    # this example parses the multiline result as csv.
    parser-csv-multi:
      command: sh -c 'echo "2018/03/10 11:17:10,hello\n2018/03/10 11:17:12,hello"'
      schedule: "@every 1s"
      parser:
        type: csv
        fields:
          - name: "@timestamp"
            type: timestamp
            format: yyyy/MM/dd HH:mm:ss
          - name: message
            type: string
    # this example parses json string.
    parser-json:
      command: echo '{"message":"hello world", "year":2018}'
      parser:
        type: json
    # this example specifies schedule.
    schedule-cron1:
      command: echo "hello world"
      schedule: "@every 1m"
    # this example specifies schedule with detailed spec.
    schedule-cron2:
      command: echo "hello world"
      schedule: "*/15 * * * *"
    # this example is debug task.
    debug-task:
      command: echo hello
      debug: true
      schedule: "*/3 * * * *"
    # this example execute shell script.
    shell:
      command: |
        #!/bin/bash

        LOADAVERAGE=$(uptime | sed -e "s/.* load averages: \([0-9.]*\).*/\1/")
        if [ $(echo "$LOADAVERAGE > 1" | bc) ]; then
          echo $LOADAVERAGE
        fi
      shell: true
      parser:
        type: csv
        fields:
          - name: load
            type: float
      schedule: "*/3 * * * *"

#================================ General =====================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their own field with each
# transaction published.
#tags: ["service-X", "web-tier"]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging


#============================== Dashboards =====================================
# These settings control loading the sample dashboards to the Kibana index. Loading
# the dashboards is disabled by default and can be enabled either by setting the
# options here, or by using the `-setup` CLI flag or the `setup` command.
#setup.dashboards.enabled: false

# The URL from where to download the dashboards archive. By default this URL
# has a value which is computed based on the Beat name and version. For released
# versions, this URL points to the dashboard archive on the artifacts.elastic.co
# website.
#setup.dashboards.url:

#============================== Kibana =====================================

# Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.
# This requires a Kibana endpoint configuration.
setup.kibana:

  # Kibana Host
  # Scheme and port can be left out and will be set to the default (http and 5601)
  # In case you specify and additional path, the scheme is required: http://localhost:5601/path
  # IPv6 addresses should always be defined as: https://[2001:db8::1]:5601
  #host: "localhost:5601"

#============================= Elastic Cloud ==================================

# These settings simplify using commandbeat with the Elastic Cloud (https://cloud.elastic.co/).

# The cloud.id setting overwrites the `output.elasticsearch.hosts` and
# `setup.kibana.host` options.
# You can find the `cloud.id` in the Elastic Cloud web UI.
#cloud.id:

# The cloud.auth setting overwrites the `output.elasticsearch.username` and
# `output.elasticsearch.password` settings. The format is `<user>:<pass>`.
#cloud.auth:

#================================ Outputs =====================================

# Configure what output to use when sending the data collected by the beat.

#-------------------------- Elasticsearch output ------------------------------
output.elasticsearch:
  # Array of hosts to connect to.
  hosts: ["localhost:9200"]

  # Optional protocol and basic auth credentials.
  #protocol: "https"
  #username: "elastic"
  #password: "changeme"

#----------------------------- Logstash output --------------------------------
#output.logstash:
  # The Logstash hosts
  #hosts: ["localhost:5044"]

  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  #ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]

  # Certificate for SSL client authentication
  #ssl.certificate: "/etc/pki/client/cert.pem"

  # Client Certificate Key
  #ssl.key: "/etc/pki/client/cert.key"

#================================ Logging =====================================

# Sets log level. The default log level is info.
# Available log levels are: error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors use ["*"]. Examples of other selectors are "beat",
# "publish", "service".
#logging.selectors: ["*"]

#============================== Xpack Monitoring ===============================
# commandbeat can export internal metrics to a central Elasticsearch monitoring
# cluster.  This requires xpack monitoring to be enabled in Elasticsearch.  The
# reporting is disabled by default.

# Set to true to enable the monitoring reporter.
#xpack.monitoring.enabled: false

# Uncomment to send the metrics to Elasticsearch. Most settings from the
# Elasticsearch output are accepted here as well. Any setting that is not set is
# automatically inherited from the Elasticsearch output configuration, so if you
# have the Elasticsearch output configured, you can simply uncomment the
# following line.
#xpack.monitoring.elasticsearch:
